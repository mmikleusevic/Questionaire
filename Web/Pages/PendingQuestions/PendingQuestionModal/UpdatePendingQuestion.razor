@using Shared.Models
@using Web.Pages.Custom

<EditForm EditContext="editContext">
    <ObjectGraphDataAnnotationsValidator/>
    <ValidationSummary class="alert alert-danger"/>

    @if (validationMessages.Any())
    {
        <div class="alert alert-danger">
            @foreach (var message in validationMessages)
            {
                <div>@message</div>
            }
        </div>
    }

    <div class="form-group row mb-3 pending-question">
        <div class="col-md-12">
            <label class="col-md-3 col-form-label">Pending Question Text:<span class="text-danger">*</span></label>
            <div class="col-lg-12">
                <TextAreaInput @bind-Value="@updatedPendingQuestion.QuestionText"
                               TextAlignment="Alignment.Start"
                               Placeholder="Enter pending question text here"
                               MaxLength="500"
                               Rows="3"/>
                <ValidationMessage For="@(() => updatedPendingQuestion.QuestionText)"
                                   class="alert alert-danger"/>
            </div>
        </div>
        <div class="col-md-12">
            <label class="col-form-label">Pending Answers:<span class="text-danger">*</span></label>
            <div class="row answers">
                @foreach (var answer in updatedPendingQuestion.PendingAnswers)
                {
                    <div class="col-md-10">
                        <div class="input-group">
                            <TextInput @bind-Value="answer.AnswerText"
                                       Placeholder="Enter answer text"
                                       MaxLength="100"/>
                        </div>
                        <ValidationMessage For="@(() => answer.AnswerText)" class="alert alert-danger"/>
                    </div>
                    <div class="col-md-2 dropdown-row">
                        <Dropdown Direction="DropdownDirection.Dropdown" Class="flex-fill"
                                  Color="@(answer.IsCorrect ? DropdownColor.Success : DropdownColor.Danger)">
                            <DropdownToggleButton>
                                @(answer.IsCorrect ? "Correct" : "Incorrect")
                            </DropdownToggleButton>
                            <DropdownMenu>
                                <DropdownItem @onclick="@(() => answer.IsCorrect = false)">
                                    Incorrect
                                </DropdownItem>
                                <DropdownItem @onclick="@(() => answer.IsCorrect = true)">
                                    Correct
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </div>
                }
            </div>
        </div>
        <CategorySelector SelectedCategories="selectedCategories" />
    </div>
    <div class="row">
        <div class="col-md-12 text-right modal-buttons">
            <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="HandleValidSubmit" Class="float-end me-2">Submit</Button>
            <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Class="float-end" @onclick="Hide">Close</Button>
        </div>
    </div>
</EditForm>