@using SharedStandard.Models
<EditForm OnValidSubmit="HandleValidSubmit" EditContext="editContext">
    <ObjectGraphDataAnnotationsValidator/>
    <ValidationSummary class="alert alert-danger"/>

    @if (validationMessages.Any())
    {
        <div class="alert alert-danger">
            @foreach (var message in validationMessages)
            {
                <div>@message</div>
            }
        </div>
    }

    <div class="form-group row mb-3 question">
        <div class="col-md-12">
            <label class="col-md-3 col-form-label">@TitleText:<span class="text-danger">*</span></label>
            <div class="col-lg-12">
                <TextAreaInput @bind-Value="updatedQuestion.QuestionText"
                               TextAlignment="Alignment.Start"
                               Placeholder="Enter question text here"
                               MaxLength="500"
                               Rows="3"/>
                <ValidationMessage For="@(() => updatedQuestion.QuestionText)" class="alert alert-danger"/>
            </div>
        </div>

        <div class="col-md-12">
            <label class="col-form-label">Answers:<span class="text-danger">*</span></label>
            <div class="row answers">
                @foreach (var answer in updatedQuestion.Answers)
                {
                    <div class="col-md-10">
                        <div class="input-group">
                            <TextInput @bind-Value="answer.AnswerText"
                                       Placeholder="Enter answer text"
                                       MaxLength="100"/>
                        </div>
                        <ValidationMessage For="@(() => answer.AnswerText)" class="alert alert-danger"/>
                    </div>
                    <div class="col-md-2 dropdown-row">
                        <Dropdown Direction="DropdownDirection.Dropdown" Class="flex-fill"
                                  Color="@(answer.IsCorrect ? DropdownColor.Success : DropdownColor.Danger)">
                            <DropdownToggleButton>
                                @(answer.IsCorrect ? "Correct" : "Incorrect")
                            </DropdownToggleButton>
                            <DropdownMenu>
                                <DropdownItem @onclick="@(() => answer.IsCorrect = false)">
                                    Incorrect
                                </DropdownItem>
                                <DropdownItem @onclick="@(() => answer.IsCorrect = true)">
                                    Correct
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </div>
                }
            </div>
        </div>

        <CategorySelector LabelText="Categories" AllowMultiple="true" SelectedCategories="selectedCategories"/>
        <label class="col-form-label">Difficulty:<span class="text-danger">*</span></label>
        <div class="col-md-2 dropdown-row difficulty">
            <Dropdown Direction="DropdownDirection.Dropdown" Color="DropdownColor.Primary" Class="flex-fill">
                <DropdownToggleButton
                    style="@($"background-color: {GetDifficultyColor(updatedQuestion.Difficulty)}; color: white;")">
                    @updatedQuestion.Difficulty
                </DropdownToggleButton>
                <DropdownMenu>
                    @foreach (Difficulty difficulty in Enum.GetValues<Difficulty>())
                    {
                        <DropdownItem
                            style="@($"background-color: {GetDifficultyColor(difficulty)}; color: white;")"
                            @onclick="@(() => updatedQuestion.Difficulty = difficulty)">
                            @difficulty.ToString()
                        </DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right modal-buttons">
            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary"
                    Class="float-end me-2">@SubmitButtonText
            </Button>
            <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Class="float-end"
                    @onclick="() => OnCancel.InvokeAsync()">Cancel
            </Button>
        </div>
    </div>
</EditForm>