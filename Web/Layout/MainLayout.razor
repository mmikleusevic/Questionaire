@using System.Security.Claims
@using Web.Providers
@inherits LayoutComponentBase

<div class="bb-page">

    <Sidebar2 @ref="@sidebar"
              IconName="IconName.PatchQuestionFill"
              Title="Questionaire"
              DataProvider="Sidebar2DataProvider"/>
    <main>
        <div class="bb-top-row px-4 d-flex justify-content-center header">
            <AuthorizeView>
                <Icon Class="navbar-toggle" Name="IconName.List" role="button" @onclick="ToggleSidebar"/>
            </AuthorizeView>
            <div class="header-right-part">
                <AuthorizeView>
                    <Authorized>
                        <p class="my-3 me-3 name">Hello, @context.User.Identity?.Name</p>
                        <button class="btn btn-primary" @onclick="Logout">Logout</button>
                    </Authorized>
                    <NotAuthorized>
                        <a class="btn btn-primary" href="/Login">Login</a>
                        <a class="btn btn-primary" href="/Register">Register</a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>

        <article class="content px-4">
            <div class="py-2">@Body</div>
        </article>
    </main>
</div>

<Toasts class="p-3" AutoHide="true" Delay="3000" Placement="ToastsPlacement.BottomRight"/>

@code {
    private const string SuperAdminRole = "SuperAdmin";
    private const string AdminRole = "Admin";
    private const string UserRole = "User";

    [Inject] private CustomAuthStateProvider CustomAuthStateProvider { get; set; }
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    private Sidebar2? sidebar;
    private List<NavItem>? navItems;

    private async Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        if (navItems is null) navItems = await GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private async Task<List<NavItem>> GetNavItems()
    {
        navItems = new List<NavItem>();

        AuthenticationState authState = await authenticationStateTask;
        ClaimsPrincipal user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            if (user.IsInRole(UserRole) || user.IsInRole(AdminRole) || user.IsInRole(SuperAdminRole))
            {
                navItems.Add(new NavItem { Id = "2", Href = "/Questions", IconName = IconName.QuestionCircleFill, Text = "Questions", IconColor = IconColor.White });
                navItems.Add(new NavItem { Id = "3", Href = "/PendingQuestions", IconName = IconName.QuestionCircle, Text = "Pending Questions", IconColor = IconColor.White });
            }

            if (user.IsInRole(AdminRole) || user.IsInRole(SuperAdminRole))
            {
                navItems.Add(new NavItem { Id = "1", Href = "/Categories", IconName = IconName.FolderFill, Text = "Categories", IconColor = IconColor.White });
            }

            if (user.IsInRole(SuperAdminRole))
            {
                navItems.Add(new NavItem { Id = "4", Href = "/Users", IconName = IconName.House, Text = "Users", IconColor = IconColor.White });
            }
        }

        navItems.Add(new NavItem { Id = "5", Href = "/Play", IconName = IconName.Play, Text = "Play", IconColor = IconColor.White });

        return navItems;
    }

    private async Task Logout()
    {
        await CustomAuthStateProvider.Logout();
    }

    private void ToggleSidebar()
    {
        if (sidebar == null) return;
        sidebar.ToggleSidebar();
    }

}