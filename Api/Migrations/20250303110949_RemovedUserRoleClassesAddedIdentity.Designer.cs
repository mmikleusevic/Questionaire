// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionaireApi;

#nullable disable

namespace QuestionaireApi.Migrations
{
    [DbContext(typeof(QuestionaireDbContext))]
    [Migration("20250303110949_RemovedUserRoleClassesAddedIdentity")]
    partial class RemovedUserRoleClassesAddedIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuestionaireApi.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "General Knowledge"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Science"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Physics",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Chemistry",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Biology",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Astronomy",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Earth Science",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "History"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Ancient History",
                            ParentCategoryId = 8
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Medieval History",
                            ParentCategoryId = 8
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Modern History",
                            ParentCategoryId = 8
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "World War I",
                            ParentCategoryId = 8
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "World War II",
                            ParentCategoryId = 8
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Geography"
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Countries & Capitals",
                            ParentCategoryId = 14
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "World Landmarks",
                            ParentCategoryId = 14
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "Maps & Flags",
                            ParentCategoryId = 14
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "Mathematics"
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "Algebra",
                            ParentCategoryId = 18
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "Geometry",
                            ParentCategoryId = 18
                        },
                        new
                        {
                            Id = 21,
                            CategoryName = "Calculus",
                            ParentCategoryId = 18
                        },
                        new
                        {
                            Id = 22,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 23,
                            CategoryName = "Football",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            Id = 24,
                            CategoryName = "Basketball",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            Id = 25,
                            CategoryName = "Tennis",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            Id = 26,
                            CategoryName = "Olympics",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            Id = 27,
                            CategoryName = "Entertainment"
                        },
                        new
                        {
                            Id = 28,
                            CategoryName = "Movies",
                            ParentCategoryId = 27
                        },
                        new
                        {
                            Id = 29,
                            CategoryName = "TV Shows",
                            ParentCategoryId = 27
                        },
                        new
                        {
                            Id = 30,
                            CategoryName = "Music",
                            ParentCategoryId = 27
                        },
                        new
                        {
                            Id = 31,
                            CategoryName = "Video Games",
                            ParentCategoryId = 27
                        },
                        new
                        {
                            Id = 32,
                            CategoryName = "Literature"
                        },
                        new
                        {
                            Id = 33,
                            CategoryName = "Classic Books",
                            ParentCategoryId = 32
                        },
                        new
                        {
                            Id = 34,
                            CategoryName = "Modern Books",
                            ParentCategoryId = 32
                        },
                        new
                        {
                            Id = 35,
                            CategoryName = "Mythology"
                        },
                        new
                        {
                            Id = 36,
                            CategoryName = "Greek Mythology",
                            ParentCategoryId = 35
                        },
                        new
                        {
                            Id = 37,
                            CategoryName = "Norse Mythology",
                            ParentCategoryId = 35
                        },
                        new
                        {
                            Id = 38,
                            CategoryName = "Egyptian Mythology",
                            ParentCategoryId = 35
                        },
                        new
                        {
                            Id = 39,
                            CategoryName = "Technology"
                        },
                        new
                        {
                            Id = 40,
                            CategoryName = "Computers",
                            ParentCategoryId = 39
                        },
                        new
                        {
                            Id = 41,
                            CategoryName = "Internet",
                            ParentCategoryId = 39
                        },
                        new
                        {
                            Id = 42,
                            CategoryName = "Artificial Intelligence",
                            ParentCategoryId = 39
                        },
                        new
                        {
                            Id = 43,
                            CategoryName = "Food & Drinks"
                        },
                        new
                        {
                            Id = 44,
                            CategoryName = "Cuisine",
                            ParentCategoryId = 43
                        },
                        new
                        {
                            Id = 45,
                            CategoryName = "Beverages",
                            ParentCategoryId = 43
                        },
                        new
                        {
                            Id = 46,
                            CategoryName = "Religion"
                        },
                        new
                        {
                            Id = 47,
                            CategoryName = "Christianity",
                            ParentCategoryId = 46
                        },
                        new
                        {
                            Id = 48,
                            CategoryName = "Islam",
                            ParentCategoryId = 46
                        },
                        new
                        {
                            Id = 49,
                            CategoryName = "Hinduism",
                            ParentCategoryId = 46
                        },
                        new
                        {
                            Id = 50,
                            CategoryName = "Buddhism",
                            ParentCategoryId = 46
                        },
                        new
                        {
                            Id = 51,
                            CategoryName = "Rock",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 52,
                            CategoryName = "Pop",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 53,
                            CategoryName = "Classical",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 54,
                            CategoryName = "Jazz",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 55,
                            CategoryName = "Hip Hop",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 56,
                            CategoryName = "Country",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 57,
                            CategoryName = "Metal",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 58,
                            CategoryName = "Blues",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 59,
                            CategoryName = "Reggae",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 60,
                            CategoryName = "Electronic",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 61,
                            CategoryName = "Folk",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 62,
                            CategoryName = "Opera",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 63,
                            CategoryName = "Movie Soundtracks",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 64,
                            CategoryName = "Music Theory",
                            ParentCategoryId = 30
                        },
                        new
                        {
                            Id = 65,
                            CategoryName = "Comedy",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 66,
                            CategoryName = "Horror",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 67,
                            CategoryName = "Action",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 68,
                            CategoryName = "Romance",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 69,
                            CategoryName = "Animation",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 70,
                            CategoryName = "Fantasy",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 71,
                            CategoryName = "Adventure",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 72,
                            CategoryName = "Drama",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 73,
                            CategoryName = "Thriller",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 74,
                            CategoryName = "Comedy",
                            ParentCategoryId = 28
                        },
                        new
                        {
                            Id = 75,
                            CategoryName = "Comedy",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 76,
                            CategoryName = "Documentary",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 77,
                            CategoryName = "Drama",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 78,
                            CategoryName = "Reality TV",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 79,
                            CategoryName = "Animation",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 80,
                            CategoryName = "Sitcom",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 81,
                            CategoryName = "Game show",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            Id = 82,
                            CategoryName = "Sci-fi",
                            ParentCategoryId = 29
                        });
                });

            modelBuilder.Entity("QuestionaireApi.Models.Database.PendingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("PendingQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PendingQuestionId");

                    b.ToTable("PendingAnswers");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Database.PendingQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("PendingQuestions");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Database.PendingQuestionCategory", b =>
                {
                    b.Property<int>("PendingQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("PendingQuestionId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PendingQuestionId", "CategoryId");

                    b.ToTable("PendingQuestionCategories");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionaireApi.Models.QuestionCategory", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionId", "CategoryId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("QuestionaireApi.Models.UserQuestionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("SeenAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId", "QuestionId");

                    b.ToTable("UserQuestionHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionaireApi.Models.Answer", b =>
                {
                    b.HasOne("QuestionaireApi.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Category", b =>
                {
                    b.HasOne("QuestionaireApi.Models.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Database.PendingAnswer", b =>
                {
                    b.HasOne("QuestionaireApi.Models.Database.PendingQuestion", "PendingQuestion")
                        .WithMany("PendingAnswers")
                        .HasForeignKey("PendingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PendingQuestion");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Database.PendingQuestionCategory", b =>
                {
                    b.HasOne("QuestionaireApi.Models.Category", "Category")
                        .WithMany("PendingQuestionCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuestionaireApi.Models.Database.PendingQuestion", "PendingQuestion")
                        .WithMany("PendingQuestionCategories")
                        .HasForeignKey("PendingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("PendingQuestion");
                });

            modelBuilder.Entity("QuestionaireApi.Models.QuestionCategory", b =>
                {
                    b.HasOne("QuestionaireApi.Models.Category", "Category")
                        .WithMany("QuestionCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuestionaireApi.Models.Question", "Question")
                        .WithMany("QuestionCategories")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionaireApi.Models.UserQuestionHistory", b =>
                {
                    b.HasOne("QuestionaireApi.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("PendingQuestionCategories");

                    b.Navigation("QuestionCategories");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Database.PendingQuestion", b =>
                {
                    b.Navigation("PendingAnswers");

                    b.Navigation("PendingQuestionCategories");
                });

            modelBuilder.Entity("QuestionaireApi.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
